#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]


pub const BCF_HL_FLT: ::libc::c_int = 0;
pub const BCF_HL_INFO: ::libc::c_int = 1;
pub const BCF_HL_FMT: ::libc::c_int = 2;
pub const BCF_HL_CTG: ::libc::c_int = 3;
pub const BCF_HL_STR: ::libc::c_int = 4;
pub const BCF_HL_GEN: ::libc::c_int = 5;

pub const BCF_HT_FLAG: ::libc::c_int = 0;
pub const BCF_HT_INT: ::libc::c_int = 1;
pub const BCF_HT_REAL: ::libc::c_int = 2;
pub const BCF_HT_STR: ::libc::c_int = 3;

pub const BCF_UN_STR: ::libc::c_int = 1;
pub const BCF_UN_FLT: ::libc::c_int = 2;

pub const BCF_DT_ID: ::libc::c_int = 0;
pub const BCF_DT_CTG: ::libc::c_int = 1;
pub const BCF_DT_SAMPLE: ::libc::c_int = 2;

pub const BCF_VL_FIXED: ::libc::c_int = 0;
pub const BCF_VL_VAR: ::libc::c_int = 1;
pub const BCF_VL_A: ::libc::c_int = 2;
pub const BCF_VL_G: ::libc::c_int = 3;
pub const BCF_VL_R: ::libc::c_int = 4;


extern "C" {
    pub fn bcf_read1_core(fp: *mut BGZF, v: *mut bcf1_t) -> ::libc::c_int;
}

/* automatically generated by rust-bindgen */

pub type __int128_t = ::libc::c_void;
pub type __uint128_t = ::libc::c_void;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intptr_t = ::libc::c_long;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type ptrdiff_t = ::libc::c_long;
pub type size_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
pub enum Struct_BGZF { }
pub type BGZF = Struct_BGZF;
pub enum Struct_cram_fd { }
pub enum Struct_hFILE { }
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct___kstring_t {
    pub l: size_t,
    pub m: size_t,
    pub s: *mut ::libc::c_char,
}
impl ::std::default::Default for Struct___kstring_t {
    fn default() -> Struct___kstring_t { unsafe { ::std::mem::zeroed() } }
}
pub type kstring_t = Struct___kstring_t;
pub type Enum_htsFormatCategory = ::libc::c_uint;
pub const unknown_category: ::libc::c_uint = 0;
pub const sequence_data: ::libc::c_uint = 1;
pub const variant_data: ::libc::c_uint = 2;
pub const index_file: ::libc::c_uint = 3;
pub const region_list: ::libc::c_uint = 4;
pub const category_maximum: ::libc::c_uint = 32767;
pub type Enum_htsExactFormat = ::libc::c_uint;
pub const unknown_format: ::libc::c_uint = 0;
pub const binary_format: ::libc::c_uint = 1;
pub const text_format: ::libc::c_uint = 2;
pub const sam: ::libc::c_uint = 3;
pub const bam: ::libc::c_uint = 4;
pub const bai: ::libc::c_uint = 5;
pub const cram: ::libc::c_uint = 6;
pub const crai: ::libc::c_uint = 7;
pub const vcf: ::libc::c_uint = 8;
pub const bcf: ::libc::c_uint = 9;
pub const csi: ::libc::c_uint = 10;
pub const gzi: ::libc::c_uint = 11;
pub const tbi: ::libc::c_uint = 12;
pub const bed: ::libc::c_uint = 13;
pub const format_maximum: ::libc::c_uint = 32767;
pub type Enum_htsCompression = ::libc::c_uint;
pub const no_compression: ::libc::c_uint = 0;
pub const gzip: ::libc::c_uint = 1;
pub const bgzf: ::libc::c_uint = 2;
pub const custom: ::libc::c_uint = 3;
pub const compression_maximum: ::libc::c_uint = 32767;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_htsFormat {
    pub category: Enum_htsFormatCategory,
    pub format: Enum_htsExactFormat,
    pub version: Struct_Unnamed1,
    pub compression: Enum_htsCompression,
    pub compression_level: ::libc::c_short,
    pub specific: *mut ::libc::c_void,
}
impl ::std::default::Default for Struct_htsFormat {
    fn default() -> Struct_htsFormat { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed1 {
    pub major: ::libc::c_short,
    pub minor: ::libc::c_short,
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Struct_Unnamed1 { unsafe { ::std::mem::zeroed() } }
}
pub type htsFormat = Struct_htsFormat;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed2 {
    pub isbin_isright_isbe_iscram_dummy : uint32_t,
    pub lineno: int64_t,
    pub line: kstring_t,
    pub _fn: *mut ::libc::c_char,
    pub fn_aux: *mut ::libc::c_char,
    pub fp: Union_Unnamed3,
    pub format: htsFormat,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Struct_Unnamed2 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn bgzf(&mut self) -> *mut *mut BGZF {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn cram(&mut self) -> *mut *mut Struct_cram_fd {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn hfile(&mut self) -> *mut *mut Struct_hFILE {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn voidp(&mut self) -> *mut *mut ::libc::c_void {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Union_Unnamed3 { unsafe { ::std::mem::zeroed() } }
}
pub type htsFile = Struct_Unnamed2;
pub type Enum_sam_fields = ::libc::c_uint;
pub const SAM_QNAME: ::libc::c_uint = 1;
pub const SAM_FLAG: ::libc::c_uint = 2;
pub const SAM_RNAME: ::libc::c_uint = 4;
pub const SAM_POS: ::libc::c_uint = 8;
pub const SAM_MAPQ: ::libc::c_uint = 16;
pub const SAM_CIGAR: ::libc::c_uint = 32;
pub const SAM_RNEXT: ::libc::c_uint = 64;
pub const SAM_PNEXT: ::libc::c_uint = 128;
pub const SAM_TLEN: ::libc::c_uint = 256;
pub const SAM_SEQ: ::libc::c_uint = 512;
pub const SAM_QUAL: ::libc::c_uint = 1024;
pub const SAM_AUX: ::libc::c_uint = 2048;
pub const SAM_RGAUX: ::libc::c_uint = 4096;
pub type Enum_cram_option = ::libc::c_uint;
pub const CRAM_OPT_DECODE_MD: ::libc::c_uint = 0;
pub const CRAM_OPT_PREFIX: ::libc::c_uint = 1;
pub const CRAM_OPT_VERBOSITY: ::libc::c_uint = 2;
pub const CRAM_OPT_SEQS_PER_SLICE: ::libc::c_uint = 3;
pub const CRAM_OPT_SLICES_PER_CONTAINER: ::libc::c_uint = 4;
pub const CRAM_OPT_RANGE: ::libc::c_uint = 5;
pub const CRAM_OPT_VERSION: ::libc::c_uint = 6;
pub const CRAM_OPT_EMBED_REF: ::libc::c_uint = 7;
pub const CRAM_OPT_IGNORE_MD5: ::libc::c_uint = 8;
pub const CRAM_OPT_REFERENCE: ::libc::c_uint = 9;
pub const CRAM_OPT_MULTI_SEQ_PER_SLICE: ::libc::c_uint = 10;
pub const CRAM_OPT_NO_REF: ::libc::c_uint = 11;
pub const CRAM_OPT_USE_BZIP2: ::libc::c_uint = 12;
pub const CRAM_OPT_SHARED_REF: ::libc::c_uint = 13;
pub const CRAM_OPT_NTHREADS: ::libc::c_uint = 14;
pub const CRAM_OPT_THREAD_POOL: ::libc::c_uint = 15;
pub const CRAM_OPT_USE_LZMA: ::libc::c_uint = 16;
pub const CRAM_OPT_USE_RANS: ::libc::c_uint = 17;
pub const CRAM_OPT_REQUIRED_FIELDS: ::libc::c_uint = 18;
pub enum Struct___hts_idx_t { }
pub type hts_idx_t = Struct___hts_idx_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed4 {
    pub u: uint64_t,
    pub v: uint64_t,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Struct_Unnamed4 { unsafe { ::std::mem::zeroed() } }
}
pub type hts_pair64_t = Struct_Unnamed4;
pub type hts_readrec_func =
    extern "C" fn(fp: *mut BGZF, data: *mut ::libc::c_void,
                  r: *mut ::libc::c_void, tid: *mut ::libc::c_int,
                  beg: *mut ::libc::c_int, end: *mut ::libc::c_int)
        -> ::libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed5 {
    pub readres_finished_dummy: uint32_t,
    pub tid: ::libc::c_int,
    pub beg: ::libc::c_int,
    pub end: ::libc::c_int,
    pub n_off: ::libc::c_int,
    pub i: ::libc::c_int,
    pub curr_tid: ::libc::c_int,
    pub curr_beg: ::libc::c_int,
    pub curr_end: ::libc::c_int,
    pub curr_off: uint64_t,
    pub off: *mut hts_pair64_t,
    pub readrec: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>,
    pub bins: Struct_Unnamed6,
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Struct_Unnamed5 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed6 {
    pub n: ::libc::c_int,
    pub m: ::libc::c_int,
    pub a: *mut ::libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Struct_Unnamed6 { unsafe { ::std::mem::zeroed() } }
}
pub type hts_itr_t = Struct_Unnamed5;
pub type hts_name2id_f =
    ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                        arg2: *const ::libc::c_char)
                              -> ::libc::c_int>;
pub type hts_id2name_f =
    ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                        arg2: ::libc::c_int)
                              -> *const ::libc::c_char>;
pub type hts_itr_query_func =
    extern "C" fn(idx: *const hts_idx_t, tid: ::libc::c_int,
                  beg: ::libc::c_int, end: ::libc::c_int,
                  readrec:
                      *mut ::std::option::Option<extern "C" fn()
                                                     -> ::libc::c_int>)
        -> *mut hts_itr_t;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed7 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Struct_Unnamed7 { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed7;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed8 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed9 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Union_wait { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed8 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Struct_Unnamed8 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed9 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Struct_Unnamed9 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed10 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed10 {
    pub unsafe fn __uptr(&mut self) -> *mut *mut Union_wait {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed10 {
    fn default() -> Union_Unnamed10 { unsafe { ::std::mem::zeroed() } }
}
pub type __WAIT_STATUS = Union_Unnamed10;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed11 {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Struct_Unnamed11 { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed11;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed12 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Struct_Unnamed12 { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed12;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed13 {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Struct_Unnamed13 { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed13;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed14 {
    pub __val: [::libc::c_ulong; 16usize],
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Struct_Unnamed14 { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed14;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Struct_timespec { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Struct_timeval { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed15 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Struct_Unnamed15 { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed15;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Union_pthread_attr_t { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Struct___pthread_internal_list {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed16 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed16 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 40usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed16 {
    fn default() -> Union_Unnamed16 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Struct___pthread_mutex_s {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_mutex_t = Union_Unnamed16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed17 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed17 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed17 {
    fn default() -> Union_Unnamed17 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed17;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed18 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed18 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed19 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 48usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_longlong {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed18 {
    fn default() -> Union_Unnamed18 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed19 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Struct_Unnamed19 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed18;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed20 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed20 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed20 {
    fn default() -> Union_Unnamed20 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed20;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed21 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed21 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed22 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed21 {
    fn default() -> Union_Unnamed21 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed22 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __pad1: ::libc::c_ulong,
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed22 {
    fn default() -> Struct_Unnamed22 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed21;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed23 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed23 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 8usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed23 {
    fn default() -> Union_Unnamed23 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed23;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed24 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed24 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 32usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed24 {
    fn default() -> Union_Unnamed24 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed24;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed25 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed25 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed25 {
    fn default() -> Union_Unnamed25 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed25;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::libc::c_int,
    pub rand_deg: ::libc::c_int,
    pub rand_sep: ::libc::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::default::Default for Struct_random_data {
    fn default() -> Struct_random_data { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_drand48_data {
    pub __x: [::libc::c_ushort; 3usize],
    pub __old_x: [::libc::c_ushort; 3usize],
    pub __c: ::libc::c_ushort,
    pub __init: ::libc::c_ushort,
    pub __a: ::libc::c_ulonglong,
}
impl ::std::default::Default for Struct_drand48_data {
    fn default() -> Struct_drand48_data { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_void,
                                        arg2: *const ::libc::c_void)
                              -> ::libc::c_int>;
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char; 13usize],
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Struct___locale_struct { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed26 {
    pub __count: ::libc::c_int,
    pub __value: Union_Unnamed27,
}
impl ::std::default::Default for Struct_Unnamed26 {
    fn default() -> Struct_Unnamed26 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed27 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed27 {
    pub unsafe fn __wch(&mut self) -> *mut ::libc::c_uint {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::libc::c_char; 4usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed27 {
    fn default() -> Union_Unnamed27 { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Struct_Unnamed26;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed28 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for Struct_Unnamed28 {
    fn default() -> Struct_Unnamed28 { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos_t = Struct_Unnamed28;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed29 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for Struct_Unnamed29 {
    fn default() -> Struct_Unnamed29 { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos64_t = Struct_Unnamed29;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::libc::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::libc::c_int,
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Struct__IO_marker { unsafe { ::std::mem::zeroed() } }
}
pub type Enum___codecvt_result = ::libc::c_uint;
pub const __codecvt_ok: ::libc::c_uint = 0;
pub const __codecvt_partial: ::libc::c_uint = 1;
pub const __codecvt_error: ::libc::c_uint = 2;
pub const __codecvt_noconv: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__IO_FILE {
    pub _flags: ::libc::c_int,
    pub _IO_read_ptr: *mut ::libc::c_char,
    pub _IO_read_end: *mut ::libc::c_char,
    pub _IO_read_base: *mut ::libc::c_char,
    pub _IO_write_base: *mut ::libc::c_char,
    pub _IO_write_ptr: *mut ::libc::c_char,
    pub _IO_write_end: *mut ::libc::c_char,
    pub _IO_buf_base: *mut ::libc::c_char,
    pub _IO_buf_end: *mut ::libc::c_char,
    pub _IO_save_base: *mut ::libc::c_char,
    pub _IO_backup_base: *mut ::libc::c_char,
    pub _IO_save_end: *mut ::libc::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::libc::c_int,
    pub _flags2: ::libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::libc::c_ushort,
    pub _vtable_offset: ::libc::c_char,
    pub _shortbuf: [::libc::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::libc::c_void,
    pub __pad2: *mut ::libc::c_void,
    pub __pad3: *mut ::libc::c_void,
    pub __pad4: *mut ::libc::c_void,
    pub __pad5: size_t,
    pub _mode: ::libc::c_int,
    pub _unused2: [::libc::c_char; 20usize],
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Struct__IO_FILE { unsafe { ::std::mem::zeroed() } }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *mut ::libc::c_char,
                  __nbytes: size_t) -> __ssize_t;
pub type __io_write_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *const ::libc::c_char,
                  __n: size_t) -> __ssize_t;
pub type __io_seek_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __pos: *mut __off64_t,
                  __w: ::libc::c_int) -> ::libc::c_int;
pub type __io_close_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void) -> ::libc::c_int;
pub type fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed30 {
    pub tab: [uint64_t; 4usize],
    pub sep: ::libc::c_int,
    pub finished: ::libc::c_int,
    pub p: *const ::libc::c_char,
}
impl ::std::default::Default for Struct_Unnamed30 {
    fn default() -> Struct_Unnamed30 { unsafe { ::std::mem::zeroed() } }
}
pub type ks_tokaux_t = Struct_Unnamed30;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed31 {
    pub _type: ::libc::c_int,
    pub key: *mut ::libc::c_char,
    pub value: *mut ::libc::c_char,
    pub nkeys: ::libc::c_int,
    pub keys: *mut *mut ::libc::c_char,
    pub vals: *mut *mut ::libc::c_char,
}
impl ::std::default::Default for Struct_Unnamed31 {
    fn default() -> Struct_Unnamed31 { unsafe { ::std::mem::zeroed() } }
}
pub type bcf_hrec_t = Struct_Unnamed31;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed32 {
    pub info: [uint32_t; 3usize],
    pub hrec: [*mut bcf_hrec_t; 3usize],
    pub id: ::libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed32 {
    fn default() -> Struct_Unnamed32 { unsafe { ::std::mem::zeroed() } }
}
pub type bcf_idinfo_t = Struct_Unnamed32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed33 {
    pub key: *const ::libc::c_char,
    pub val: *const bcf_idinfo_t,
}
impl ::std::default::Default for Struct_Unnamed33 {
    fn default() -> Struct_Unnamed33 { unsafe { ::std::mem::zeroed() } }
}
pub type bcf_idpair_t = Struct_Unnamed33;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed34 {
    pub n: [int32_t; 3usize],
    pub id: [*mut bcf_idpair_t; 3usize],
    pub dict: [*mut ::libc::c_void; 3usize],
    pub samples: *mut *mut ::libc::c_char,
    pub hrec: *mut *mut bcf_hrec_t,
    pub nhrec: ::libc::c_int,
    pub dirty: ::libc::c_int,
    pub ntransl: ::libc::c_int,
    pub transl: [*mut ::libc::c_int; 2usize],
    pub nsamples_ori: ::libc::c_int,
    pub keep_samples: *mut uint8_t,
    pub mem: kstring_t,
}
impl ::std::default::Default for Struct_Unnamed34 {
    fn default() -> Struct_Unnamed34 { unsafe { ::std::mem::zeroed() } }
}
pub type bcf_hdr_t = Struct_Unnamed34;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed35 {
    pub _type: ::libc::c_int,
    pub n: ::libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed35 {
    fn default() -> Struct_Unnamed35 { unsafe { ::std::mem::zeroed() } }
}
pub type variant_t = Struct_Unnamed35;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed36 {
    pub id: ::libc::c_int,
    pub n: ::libc::c_int,
    pub size: ::libc::c_int,
    pub _type: ::libc::c_int,
    pub p: *mut uint8_t,
    pub p_len: uint32_t,
    pub p_off_p_free: uint32_t,
}
impl ::std::default::Default for Struct_Unnamed36 {
    fn default() -> Struct_Unnamed36 { unsafe { ::std::mem::zeroed() } }
}
pub type bcf_fmt_t = Struct_Unnamed36;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed37 {
    pub key: ::libc::c_int,
    pub _type: ::libc::c_int,
    pub len: ::libc::c_int,
    pub v1: Union_Unnamed38,
    pub vptr: *mut uint8_t,
    pub vptr_len: uint32_t,
    pub vptr_off_vptr_free: uint32_t,
}
impl ::std::default::Default for Struct_Unnamed37 {
    fn default() -> Struct_Unnamed37 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed38 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed38 {
    pub unsafe fn i(&mut self) -> *mut int32_t {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn f(&mut self) -> *mut ::libc::c_float {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed38 {
    fn default() -> Union_Unnamed38 { unsafe { ::std::mem::zeroed() } }
}
pub type bcf_info_t = Struct_Unnamed37;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed39 {
    pub m_fmt: ::libc::c_int,
    pub m_info: ::libc::c_int,
    pub m_id: ::libc::c_int,
    pub m_als: ::libc::c_int,
    pub m_allele: ::libc::c_int,
    pub m_flt: ::libc::c_int,
    pub n_flt: ::libc::c_int,
    pub flt: *mut ::libc::c_int,
    pub id: *mut ::libc::c_char,
    pub als: *mut ::libc::c_char,
    pub allele: *mut *mut ::libc::c_char,
    pub info: *mut bcf_info_t,
    pub fmt: *mut bcf_fmt_t,
    pub var: *mut variant_t,
    pub n_var: ::libc::c_int,
    pub var_type: ::libc::c_int,
    pub shared_dirty: ::libc::c_int,
    pub indiv_dirty: ::libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed39 {
    fn default() -> Struct_Unnamed39 { unsafe { ::std::mem::zeroed() } }
}
pub type bcf_dec_t = Struct_Unnamed39;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed40 {
    pub rid: int32_t,
    pub pos: int32_t,
    pub rlen: int32_t,
    pub qual: ::libc::c_float,
    pub n_info: uint16_t,
    pub n_allele: uint16_t,
    pub n_fmt_n_sample: uint32_t,
    pub shared: kstring_t,
    pub indiv: kstring_t,
    pub d: bcf_dec_t,
    pub max_unpack: ::libc::c_int,
    pub unpacked: ::libc::c_int,
    pub unpack_size: [::libc::c_int; 3usize],
    pub errcode: ::libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed40 {
    fn default() -> Struct_Unnamed40 { unsafe { ::std::mem::zeroed() } }
}
pub type bcf1_t = Struct_Unnamed40;
pub type vcfFile = htsFile;
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Struct___va_list_tag { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut hts_verbose: ::libc::c_int;
    pub static mut seq_nt16_table: [::libc::c_uchar; 256usize];
    pub static mut seq_nt16_str: *const ::libc::c_char;
    pub static mut seq_nt16_int: *const ::libc::c_int;
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
    pub static mut bcf_type_shift: *mut uint8_t;
    pub static mut bcf_float_vector_end: uint32_t;
    pub static mut bcf_float_missing: uint32_t;
}
extern "C" {
    pub fn __assert_fail(__assertion: *const ::libc::c_char,
                         __file: *const ::libc::c_char,
                         __line: ::libc::c_uint,
                         __function: *const ::libc::c_char) -> ();
    pub fn __assert_perror_fail(__errnum: ::libc::c_int,
                                __file: *const ::libc::c_char,
                                __line: ::libc::c_uint,
                                __function: *const ::libc::c_char) -> ();
    pub fn __assert(__assertion: *const ::libc::c_char,
                    __file: *const ::libc::c_char, __line: ::libc::c_int)
     -> ();
    pub fn hts_version() -> *const ::libc::c_char;
    pub fn hts_detect_format(fp: *mut Struct_hFILE, fmt: *mut htsFormat)
     -> ::libc::c_int;
    pub fn hts_format_description(format: *const htsFormat)
     -> *mut ::libc::c_char;
    pub fn hts_open(_fn: *const ::libc::c_char, mode: *const ::libc::c_char)
     -> *mut htsFile;
    pub fn hts_hopen(fp: *mut Struct_hFILE, _fn: *const ::libc::c_char,
                     mode: *const ::libc::c_char) -> *mut htsFile;
    pub fn hts_close(fp: *mut htsFile) -> ::libc::c_int;
    pub fn hts_get_format(fp: *mut htsFile) -> *const htsFormat;
    pub fn hts_set_opt(fp: *mut htsFile, opt: Enum_cram_option, ...)
     -> ::libc::c_int;
    pub fn hts_getline(fp: *mut htsFile, delimiter: ::libc::c_int,
                       str: *mut kstring_t) -> ::libc::c_int;
    pub fn hts_readlines(_fn: *const ::libc::c_char, _n: *mut ::libc::c_int)
     -> *mut *mut ::libc::c_char;
    pub fn hts_readlist(_fn: *const ::libc::c_char, is_file: ::libc::c_int,
                        _n: *mut ::libc::c_int) -> *mut *mut ::libc::c_char;
    pub fn hts_set_threads(fp: *mut htsFile, n: ::libc::c_int)
     -> ::libc::c_int;
    pub fn hts_set_fai_filename(fp: *mut htsFile,
                                fn_aux: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn hts_idx_init(n: ::libc::c_int, fmt: ::libc::c_int,
                        offset0: uint64_t, min_shift: ::libc::c_int,
                        n_lvls: ::libc::c_int) -> *mut hts_idx_t;
    pub fn hts_idx_destroy(idx: *mut hts_idx_t) -> ();
    pub fn hts_idx_push(idx: *mut hts_idx_t, tid: ::libc::c_int,
                        beg: ::libc::c_int, end: ::libc::c_int,
                        offset: uint64_t, is_mapped: ::libc::c_int)
     -> ::libc::c_int;
    pub fn hts_idx_finish(idx: *mut hts_idx_t, final_offset: uint64_t) -> ();
    pub fn hts_idx_save(idx: *const hts_idx_t, _fn: *const ::libc::c_char,
                        fmt: ::libc::c_int) -> ();
    pub fn hts_idx_load(_fn: *const ::libc::c_char, fmt: ::libc::c_int)
     -> *mut hts_idx_t;
    pub fn hts_idx_get_meta(idx: *mut hts_idx_t, l_meta: *mut ::libc::c_int)
     -> *mut uint8_t;
    pub fn hts_idx_set_meta(idx: *mut hts_idx_t, l_meta: ::libc::c_int,
                            meta: *mut uint8_t, is_copy: ::libc::c_int) -> ();
    pub fn hts_idx_get_stat(idx: *const hts_idx_t, tid: ::libc::c_int,
                            mapped: *mut uint64_t, unmapped: *mut uint64_t)
     -> ::libc::c_int;
    pub fn hts_idx_get_n_no_coor(idx: *const hts_idx_t) -> uint64_t;
    pub fn hts_parse_reg(s: *const ::libc::c_char, beg: *mut ::libc::c_int,
                         end: *mut ::libc::c_int) -> *const ::libc::c_char;
    pub fn hts_itr_query(idx: *const hts_idx_t, tid: ::libc::c_int,
                         beg: ::libc::c_int, end: ::libc::c_int,
                         readrec:
                             *mut ::std::option::Option<extern "C" fn()
                                                            -> ::libc::c_int>)
     -> *mut hts_itr_t;
    pub fn hts_itr_destroy(iter: *mut hts_itr_t) -> ();
    pub fn hts_itr_querys(idx: *const hts_idx_t, reg: *const ::libc::c_char,
                          getid: hts_name2id_f, hdr: *mut ::libc::c_void,
                          itr_query:
                              *mut ::std::option::Option<extern "C" fn()
                                                             ->
                                                                 *mut hts_itr_t>,
                          readrec:
                              *mut ::std::option::Option<extern "C" fn()
                                                             ->
                                                                 ::libc::c_int>)
     -> *mut hts_itr_t;
    pub fn hts_itr_next(fp: *mut BGZF, iter: *mut hts_itr_t,
                        r: *mut ::libc::c_void, data: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn hts_idx_seqnames(idx: *const hts_idx_t, n: *mut ::libc::c_int,
                            getid: hts_id2name_f, hdr: *mut ::libc::c_void)
     -> *mut *const ::libc::c_char;
    pub fn hts_file_type(fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::libc::c_char) -> ::libc::c_double;
    pub fn atoi(__nptr: *const ::libc::c_char) -> ::libc::c_int;
    pub fn atol(__nptr: *const ::libc::c_char) -> ::libc::c_long;
    pub fn atoll(__nptr: *const ::libc::c_char) -> ::libc::c_longlong;
    pub fn strtod(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtof(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_float;
    pub fn strtold(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtol(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_long;
    pub fn strtoul(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulong;
    pub fn strtoq(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtouq(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn strtoll(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtoull(__nptr: *const ::libc::c_char,
                    __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn l64a(__n: ::libc::c_long) -> *mut ::libc::c_char;
    pub fn a64l(__s: *const ::libc::c_char) -> ::libc::c_long;
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn random() -> ::libc::c_long;
    pub fn srandom(__seed: ::libc::c_uint) -> ();
    pub fn initstate(__seed: ::libc::c_uint, __statebuf: *mut ::libc::c_char,
                     __statelen: size_t) -> *mut ::libc::c_char;
    pub fn setstate(__statebuf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn random_r(__buf: *mut Struct_random_data, __result: *mut int32_t)
     -> ::libc::c_int;
    pub fn srandom_r(__seed: ::libc::c_uint, __buf: *mut Struct_random_data)
     -> ::libc::c_int;
    pub fn initstate_r(__seed: ::libc::c_uint,
                       __statebuf: *mut ::libc::c_char, __statelen: size_t,
                       __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn setstate_r(__statebuf: *mut ::libc::c_char,
                      __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn rand() -> ::libc::c_int;
    pub fn srand(__seed: ::libc::c_uint) -> ();
    pub fn rand_r(__seed: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn drand48() -> ::libc::c_double;
    pub fn erand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_double;
    pub fn lrand48() -> ::libc::c_long;
    pub fn nrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn mrand48() -> ::libc::c_long;
    pub fn jrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn srand48(__seedval: ::libc::c_long) -> ();
    pub fn seed48(__seed16v: *mut ::libc::c_ushort) -> *mut ::libc::c_ushort;
    pub fn lcong48(__param: *mut ::libc::c_ushort) -> ();
    pub fn drand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn erand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn lrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn nrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn mrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn jrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn srand48_r(__seedval: ::libc::c_long,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn seed48_r(__seed16v: *mut ::libc::c_ushort,
                    __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn lcong48_r(__param: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn malloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::libc::c_void;
    pub fn realloc(__ptr: *mut ::libc::c_void, __size: size_t)
     -> *mut ::libc::c_void;
    pub fn free(__ptr: *mut ::libc::c_void) -> ();
    pub fn cfree(__ptr: *mut ::libc::c_void) -> ();
    pub fn alloca(__size: size_t) -> *mut ::libc::c_void;
    pub fn valloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::libc::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::libc::c_int;
    pub fn abort() -> ();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<extern "C" fn(__status:
                                                               ::libc::c_int,
                                                           __arg:
                                                               *mut ::libc::c_void)
                                                 -> ()>,
                   __arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn exit(__status: ::libc::c_int) -> ();
    pub fn _Exit(__status: ::libc::c_int) -> ();
    pub fn getenv(__name: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn putenv(__string: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn setenv(__name: *const ::libc::c_char,
                  __value: *const ::libc::c_char, __replace: ::libc::c_int)
     -> ::libc::c_int;
    pub fn unsetenv(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn clearenv() -> ::libc::c_int;
    pub fn mktemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mkstemp(__template: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn mkstemps(__template: *mut ::libc::c_char,
                    __suffixlen: ::libc::c_int) -> ::libc::c_int;
    pub fn mkdtemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn system(__command: *const ::libc::c_char) -> ::libc::c_int;
    pub fn realpath(__name: *const ::libc::c_char,
                    __resolved: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn bsearch(__key: *const ::libc::c_void,
                   __base: *const ::libc::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::libc::c_void;
    pub fn qsort(__base: *mut ::libc::c_void, __nmemb: size_t, __size: size_t,
                 __compar: __compar_fn_t) -> ();
    pub fn abs(__x: ::libc::c_int) -> ::libc::c_int;
    pub fn labs(__x: ::libc::c_long) -> ::libc::c_long;
    pub fn llabs(__x: ::libc::c_longlong) -> ::libc::c_longlong;
    pub fn div(__numer: ::libc::c_int, __denom: ::libc::c_int) -> div_t;
    pub fn ldiv(__numer: ::libc::c_long, __denom: ::libc::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::libc::c_longlong, __denom: ::libc::c_longlong)
     -> lldiv_t;
    pub fn ecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn fcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn gcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn qecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn qfcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn qgcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn fcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn qecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn qfcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn mblen(__s: *const ::libc::c_char, __n: size_t) -> ::libc::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::libc::c_char,
                  __n: size_t) -> ::libc::c_int;
    pub fn wctomb(__s: *mut ::libc::c_char, __wchar: wchar_t)
     -> ::libc::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::libc::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::libc::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::libc::c_char) -> ::libc::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::libc::c_char,
                     __tokens: *const *mut ::libc::c_char,
                     __valuep: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn getloadavg(__loadavg: *mut ::libc::c_double,
                      __nelem: ::libc::c_int) -> ::libc::c_int;
    pub fn memcpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                  __n: size_t) -> *mut ::libc::c_void;
    pub fn memmove(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __n: size_t) -> *mut ::libc::c_void;
    pub fn memccpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __c: ::libc::c_int, __n: size_t) -> *mut ::libc::c_void;
    pub fn memset(__s: *mut ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn memcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                  __n: size_t) -> ::libc::c_int;
    pub fn memchr(__s: *const ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn strcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strncmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                   __n: size_t) -> ::libc::c_int;
    pub fn strcoll(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strxfrm(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> size_t;
    pub fn strcoll_l(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                     __l: __locale_t) -> ::libc::c_int;
    pub fn strxfrm_l(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strndup(__string: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn strchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strrchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strcspn(__s: *const ::libc::c_char,
                   __reject: *const ::libc::c_char) -> size_t;
    pub fn strspn(__s: *const ::libc::c_char, __accept: *const ::libc::c_char)
     -> size_t;
    pub fn strpbrk(__s: *const ::libc::c_char,
                   __accept: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strstr(__haystack: *const ::libc::c_char,
                  __needle: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strtok(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __strtok_r(__s: *mut ::libc::c_char,
                      __delim: *const ::libc::c_char,
                      __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strtok_r(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char,
                    __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strlen(__s: *const ::libc::c_char) -> size_t;
    pub fn strnlen(__string: *const ::libc::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strerror_r(__errnum: ::libc::c_int, __buf: *mut ::libc::c_char,
                      __buflen: size_t) -> ::libc::c_int;
    pub fn strerror_l(__errnum: ::libc::c_int, __l: __locale_t)
     -> *mut ::libc::c_char;
    pub fn __bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcopy(__src: *const ::libc::c_void, __dest: *mut ::libc::c_void,
                 __n: size_t) -> ();
    pub fn bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                __n: size_t) -> ::libc::c_int;
    pub fn index(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn rindex(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn ffs(__i: ::libc::c_int) -> ::libc::c_int;
    pub fn strcasecmp(__s1: *const ::libc::c_char,
                      __s2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strncasecmp(__s1: *const ::libc::c_char,
                       __s2: *const ::libc::c_char, __n: size_t)
     -> ::libc::c_int;
    pub fn strsep(__stringp: *mut *mut ::libc::c_char,
                  __delim: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strsignal(__sig: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn __stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __stpncpy(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn stpncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_putc(__c: ::libc::c_int, __fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                        arg3: __gnuc_va_list) -> ::libc::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::libc::c_int, arg3: __ssize_t)
     -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::libc::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int, arg4: ::libc::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE) -> ();
    pub fn remove(__filename: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(__old: *const ::libc::c_char, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn renameat(__oldfd: ::libc::c_int, __old: *const ::libc::c_char,
                    __newfd: ::libc::c_int, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tmpnam_r(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tempnam(__dir: *const ::libc::c_char, __pfx: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fopen(__filename: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::libc::c_char,
                   __modes: *const ::libc::c_char, __stream: *mut FILE)
     -> *mut FILE;
    pub fn fdopen(__fd: ::libc::c_int, __modes: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fmemopen(__s: *mut ::libc::c_void, __len: size_t,
                    __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::libc::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char) -> ();
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                   __modes: ::libc::c_int, __n: size_t) -> ::libc::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                     __size: size_t) -> ();
    pub fn setlinebuf(__stream: *mut FILE) -> ();
    pub fn fprintf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn printf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sprintf(__s: *mut ::libc::c_char,
                   __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vprintf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsprintf(__s: *mut ::libc::c_char, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn snprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                    __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vsnprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                     __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vdprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn dprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn scanf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(__s: *const ::libc::c_char,
                  __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::libc::c_char,
                   __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vscanf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsscanf(__s: *const ::libc::c_char,
                   __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fputc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putchar(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn fputc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putchar_unlocked(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(__stream: *mut FILE) -> ::libc::c_int;
    pub fn putw(__w: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fgets(__s: *mut ::libc::c_char, __n: ::libc::c_int,
                 __stream: *mut FILE) -> *mut ::libc::c_char;
    pub fn gets(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                      __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                    __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                   __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::libc::c_char, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn puts(__s: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ungetc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fread(__ptr: *mut ::libc::c_void, __size: size_t, __n: size_t,
                 __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::libc::c_void, __size: size_t, __n: size_t,
                  __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::libc::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::libc::c_void, __size: size_t,
                           __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::libc::c_long,
                 __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::libc::c_long;
    pub fn rewind(__stream: *mut FILE) -> ();
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::libc::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::libc::c_int;
    pub fn clearerr(__stream: *mut FILE) -> ();
    pub fn feof(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::libc::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE) -> ();
    pub fn feof_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn perror(__s: *const ::libc::c_char) -> ();
    pub fn fileno(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn popen(__command: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ctermid(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn flockfile(__stream: *mut FILE) -> ();
    pub fn ftrylockfile(__stream: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(__stream: *mut FILE) -> ();
    pub fn kvsprintf(s: *mut kstring_t, fmt: *const ::libc::c_char,
                     ap: va_list) -> ::libc::c_int;
    pub fn ksprintf(s: *mut kstring_t, fmt: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn ksplit_core(s: *mut ::libc::c_char, delimiter: ::libc::c_int,
                       _max: *mut ::libc::c_int,
                       _offsets: *mut *mut ::libc::c_int) -> ::libc::c_int;
    pub fn kstrstr(str: *const ::libc::c_char, pat: *const ::libc::c_char,
                   _prep: *mut *mut ::libc::c_int) -> *mut ::libc::c_char;
    pub fn kstrnstr(str: *const ::libc::c_char, pat: *const ::libc::c_char,
                    n: ::libc::c_int, _prep: *mut *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn kmemmem(_str: *const ::libc::c_void, n: ::libc::c_int,
                   _pat: *const ::libc::c_void, m: ::libc::c_int,
                   _prep: *mut *mut ::libc::c_int) -> *mut ::libc::c_void;
    pub fn kstrtok(str: *const ::libc::c_char, sep: *const ::libc::c_char,
                   aux: *mut ks_tokaux_t) -> *mut ::libc::c_char;
    pub fn bcf_hdr_init(mode: *const ::libc::c_char) -> *mut bcf_hdr_t;
    pub fn bcf_hdr_destroy(h: *mut bcf_hdr_t) -> ();
    pub fn bcf_init() -> *mut bcf1_t;
    pub fn bcf_destroy(v: *mut bcf1_t) -> ();
    pub fn bcf_empty(v: *mut bcf1_t) -> ();
    pub fn bcf_clear(v: *mut bcf1_t) -> ();
    pub fn bcf_hdr_read(fp: *mut htsFile) -> *mut bcf_hdr_t;
    pub fn bcf_hdr_set_samples(hdr: *mut bcf_hdr_t,
                               samples: *const ::libc::c_char,
                               is_file: ::libc::c_int) -> ::libc::c_int;
    pub fn bcf_subset_format(hdr: *const bcf_hdr_t, rec: *mut bcf1_t)
     -> ::libc::c_int;
    pub fn bcf_hdr_write(fp: *mut htsFile, h: *mut bcf_hdr_t)
     -> ::libc::c_int;
    pub fn vcf_parse(s: *mut kstring_t, h: *const bcf_hdr_t, v: *mut bcf1_t)
     -> ::libc::c_int;
    pub fn vcf_format(h: *const bcf_hdr_t, v: *const bcf1_t,
                      s: *mut kstring_t) -> ::libc::c_int;
    pub fn bcf_read(fp: *mut htsFile, h: *const bcf_hdr_t, v: *mut bcf1_t)
     -> ::libc::c_int;
    pub fn bcf_unpack(b: *mut bcf1_t, which: ::libc::c_int) -> ::libc::c_int;
    pub fn bcf_dup(src: *mut bcf1_t) -> *mut bcf1_t;
    pub fn bcf_copy(dst: *mut bcf1_t, src: *mut bcf1_t) -> *mut bcf1_t;
    pub fn bcf_write(fp: *mut htsFile, h: *const bcf_hdr_t, v: *mut bcf1_t)
     -> ::libc::c_int;
    pub fn vcf_hdr_read(fp: *mut htsFile) -> *mut bcf_hdr_t;
    pub fn vcf_hdr_write(fp: *mut htsFile, h: *const bcf_hdr_t)
     -> ::libc::c_int;
    pub fn vcf_read(fp: *mut htsFile, h: *const bcf_hdr_t, v: *mut bcf1_t)
     -> ::libc::c_int;
    pub fn vcf_write(fp: *mut htsFile, h: *const bcf_hdr_t, v: *mut bcf1_t)
     -> ::libc::c_int;
    pub fn bcf_readrec(fp: *mut BGZF, null: *mut ::libc::c_void,
                       v: *mut ::libc::c_void, tid: *mut ::libc::c_int,
                       beg: *mut ::libc::c_int, end: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn bcf_hdr_dup(hdr: *const bcf_hdr_t) -> *mut bcf_hdr_t;
    pub fn bcf_hdr_combine(dst: *mut bcf_hdr_t, src: *const bcf_hdr_t)
     -> ::libc::c_int;
    pub fn bcf_hdr_add_sample(hdr: *mut bcf_hdr_t,
                              sample: *const ::libc::c_char) -> ::libc::c_int;
    pub fn bcf_hdr_set(hdr: *mut bcf_hdr_t, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn bcf_hdr_fmt_text(hdr: *const bcf_hdr_t, is_bcf: ::libc::c_int,
                            len: *mut ::libc::c_int) -> *mut ::libc::c_char;
    pub fn bcf_hdr_append(h: *mut bcf_hdr_t, line: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn bcf_hdr_printf(h: *mut bcf_hdr_t,
                          format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn bcf_hdr_get_version(hdr: *const bcf_hdr_t)
     -> *const ::libc::c_char;
    pub fn bcf_hdr_set_version(hdr: *mut bcf_hdr_t,
                               version: *const ::libc::c_char) -> ();
    pub fn bcf_hdr_remove(h: *mut bcf_hdr_t, _type: ::libc::c_int,
                          key: *const ::libc::c_char) -> ();
    pub fn bcf_hdr_subset(h0: *const bcf_hdr_t, n: ::libc::c_int,
                          samples: *const *mut ::libc::c_char,
                          imap: *mut ::libc::c_int) -> *mut bcf_hdr_t;
    pub fn bcf_hdr_seqnames(h: *const bcf_hdr_t, nseqs: *mut ::libc::c_int)
     -> *mut *const ::libc::c_char;
    pub fn bcf_hdr_parse(hdr: *mut bcf_hdr_t, htxt: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn bcf_hdr_sync(h: *mut bcf_hdr_t) -> ::libc::c_int;
    pub fn bcf_hdr_parse_line(h: *const bcf_hdr_t,
                              line: *const ::libc::c_char,
                              len: *mut ::libc::c_int) -> *mut bcf_hrec_t;
    pub fn bcf_hrec_format(hrec: *const bcf_hrec_t, str: *mut kstring_t)
     -> ();
    pub fn bcf_hdr_add_hrec(hdr: *mut bcf_hdr_t, hrec: *mut bcf_hrec_t)
     -> ::libc::c_int;
    pub fn bcf_hdr_get_hrec(hdr: *const bcf_hdr_t, _type: ::libc::c_int,
                            key: *const ::libc::c_char,
                            value: *const ::libc::c_char,
                            str_class: *const ::libc::c_char)
     -> *mut bcf_hrec_t;
    pub fn bcf_hrec_dup(hrec: *mut bcf_hrec_t) -> *mut bcf_hrec_t;
    pub fn bcf_hrec_add_key(hrec: *mut bcf_hrec_t, str: *const ::libc::c_char,
                            len: ::libc::c_int) -> ();
    pub fn bcf_hrec_set_val(hrec: *mut bcf_hrec_t, i: ::libc::c_int,
                            str: *const ::libc::c_char, len: ::libc::c_int,
                            is_quoted: ::libc::c_int) -> ();
    pub fn bcf_hrec_find_key(hrec: *mut bcf_hrec_t,
                             key: *const ::libc::c_char) -> ::libc::c_int;
    pub fn hrec_add_idx(hrec: *mut bcf_hrec_t, idx: ::libc::c_int) -> ();
    pub fn bcf_hrec_destroy(hrec: *mut bcf_hrec_t) -> ();
    pub fn bcf_subset(h: *const bcf_hdr_t, v: *mut bcf1_t, n: ::libc::c_int,
                      imap: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn bcf_translate(dst_hdr: *const bcf_hdr_t, src_hdr: *mut bcf_hdr_t,
                         src_line: *mut bcf1_t) -> ::libc::c_int;
    pub fn bcf_get_variant_types(rec: *mut bcf1_t) -> ::libc::c_int;
    pub fn bcf_get_variant_type(rec: *mut bcf1_t, ith_allele: ::libc::c_int)
     -> ::libc::c_int;
    pub fn bcf_is_snp(v: *mut bcf1_t) -> ::libc::c_int;
    pub fn bcf_update_filter(hdr: *const bcf_hdr_t, line: *mut bcf1_t,
                             flt_ids: *mut ::libc::c_int, n: ::libc::c_int)
     -> ::libc::c_int;
    pub fn bcf_add_filter(hdr: *const bcf_hdr_t, line: *mut bcf1_t,
                          flt_id: ::libc::c_int) -> ::libc::c_int;
    pub fn bcf_remove_filter(hdr: *const bcf_hdr_t, line: *mut bcf1_t,
                             flt_id: ::libc::c_int, pass: ::libc::c_int)
     -> ::libc::c_int;
    pub fn bcf_has_filter(hdr: *const bcf_hdr_t, line: *mut bcf1_t,
                          filter: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn bcf_update_alleles(hdr: *const bcf_hdr_t, line: *mut bcf1_t,
                              alleles: *mut *const ::libc::c_char,
                              nals: ::libc::c_int) -> ::libc::c_int;
    pub fn bcf_update_alleles_str(hdr: *const bcf_hdr_t, line: *mut bcf1_t,
                                  alleles_string: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn bcf_update_id(hdr: *const bcf_hdr_t, line: *mut bcf1_t,
                         id: *const ::libc::c_char) -> ::libc::c_int;
    pub fn bcf_update_info(hdr: *const bcf_hdr_t, line: *mut bcf1_t,
                           key: *const ::libc::c_char,
                           values: *const ::libc::c_void, n: ::libc::c_int,
                           _type: ::libc::c_int) -> ::libc::c_int;
    pub fn bcf_update_format_string(hdr: *const bcf_hdr_t, line: *mut bcf1_t,
                                    key: *const ::libc::c_char,
                                    values: *mut *const ::libc::c_char,
                                    n: ::libc::c_int) -> ::libc::c_int;
    pub fn bcf_update_format(hdr: *const bcf_hdr_t, line: *mut bcf1_t,
                             key: *const ::libc::c_char,
                             values: *const ::libc::c_void, n: ::libc::c_int,
                             _type: ::libc::c_int) -> ::libc::c_int;
    pub fn bcf_get_fmt(hdr: *const bcf_hdr_t, line: *mut bcf1_t,
                       key: *const ::libc::c_char) -> *mut bcf_fmt_t;
    pub fn bcf_get_info(hdr: *const bcf_hdr_t, line: *mut bcf1_t,
                        key: *const ::libc::c_char) -> *mut bcf_info_t;
    pub fn bcf_get_fmt_id(line: *mut bcf1_t, id: ::libc::c_int)
     -> *mut bcf_fmt_t;
    pub fn bcf_get_info_id(line: *mut bcf1_t, id: ::libc::c_int)
     -> *mut bcf_info_t;
    pub fn bcf_get_info_values(hdr: *const bcf_hdr_t, line: *mut bcf1_t,
                               tag: *const ::libc::c_char,
                               dst: *mut *mut ::libc::c_void,
                               ndst: *mut ::libc::c_int, _type: ::libc::c_int)
     -> ::libc::c_int;
    pub fn bcf_get_format_string(hdr: *const bcf_hdr_t, line: *mut bcf1_t,
                                 tag: *const ::libc::c_char,
                                 dst: *mut *mut *mut ::libc::c_char,
                                 ndst: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn bcf_get_format_values(hdr: *const bcf_hdr_t, line: *mut bcf1_t,
                                 tag: *const ::libc::c_char,
                                 dst: *mut *mut ::libc::c_void,
                                 ndst: *mut ::libc::c_int,
                                 _type: ::libc::c_int) -> ::libc::c_int;
    pub fn bcf_hdr_id2int(hdr: *const bcf_hdr_t, _type: ::libc::c_int,
                          id: *const ::libc::c_char) -> ::libc::c_int;
    pub fn bcf_fmt_array(s: *mut kstring_t, n: ::libc::c_int,
                         _type: ::libc::c_int, data: *mut ::libc::c_void)
     -> ();
    pub fn bcf_fmt_sized_array(s: *mut kstring_t, ptr: *mut uint8_t)
     -> *mut uint8_t;
    pub fn bcf_enc_vchar(s: *mut kstring_t, l: ::libc::c_int,
                         a: *const ::libc::c_char) -> ();
    pub fn bcf_enc_vint(s: *mut kstring_t, n: ::libc::c_int, a: *mut int32_t,
                        wsize: ::libc::c_int) -> ();
    pub fn bcf_enc_vfloat(s: *mut kstring_t, n: ::libc::c_int,
                          a: *mut ::libc::c_float) -> ();
    pub fn bcf_index_build(_fn: *const ::libc::c_char,
                           min_shift: ::libc::c_int) -> ::libc::c_int;
}
